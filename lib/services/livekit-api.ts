import { logger } from "@/lib/logging/logger";

// Get the server URL from environment variables or use a default
const SERVER_URL = process.env.NEXT_PUBLIC_SERVER_URL || "http://localhost:8000";

/**
 * Fetches a LiveKit token from the Python backend server.
 * The room name is generated by the backend.
 * The identity is generated by the backend.
 * @returns An object containing the token, LiveKit server URL (livekitUrl), roomName, identity and more...
 */
export async function getLiveKitToken() {
  logger.info(`Requesting LiveKit token from backend.`);
  
  try {
    const url = new URL(`${SERVER_URL}/api/livekit-token`);

    const response = await fetch(url.toString(), {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
      },
    });
    
    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
      } catch {
        const textError = await response.text();
        logger.error(`LiveKit token request failed: ${response.statusText} - ${textError}`, { status: response.status });
        throw new Error(`Failed to get LiveKit token: ${response.statusText} - ${textError}`);
      }
      const errorMessage = errorData?.detail || errorData?.error || 'Failed to get LiveKit token from backend';
      logger.error(`LiveKit token request failed: ${errorMessage}`, { status: response.status, statusText: response.statusText, errorData });
      throw new Error(errorMessage);
    }
    
    const data = await response.json();
    
    if (!data.token || !data.livekit_url || !data.room_name || !data.identity) {
      logger.error('Invalid response from backend token API. Missing token, livekit_url, room_name, or identity.', { data });
      throw new Error('Invalid response from backend token API. Missing token, livekit_url, room_name, or identity.');
    }
    
    const token = String(data.token);
    const livekitUrl = String(data.livekit_url);
    const roomName = String(data.room_name);
    const identity = String(data.identity);
    
    logger.success(`Successfully obtained LiveKit token from backend`, { tokenLength: token.length, livekitUrl, roomName, identity });
    return { token, livekitUrl, roomName, identity };
  } catch (error) {
    logger.error('Error while fetching LiveKit token from backend', { error });
    throw error;
  }
}